<?php
namespace Tests\Infrastructure\Events\Adapters;

use Infrastructure\Events\Adapters\CustomEventDispatcher;
use Infrastructure\Events\DomainEvent;
use Slim\Container;
use Tests\Infrastructure\Base;
use Tests\Infrastructure\BaseEvent;
use Tests\Infrastructure\BaseEventHandler;

class CustomEventDispatcherTest extends Base
{
    /** @var CustomEventDispatcher */
    protected $dispatcher;

    /** @var  Container */
    protected $container;

    /** @var string */
    protected $eventName;

    /** @var  BaseEvent */
    protected $event;

    /** @var  bool */
    protected $receiveFlag;

    /** @var  bool */
    protected $middlewareFlag;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->receiveFlag = false;
        $this->middlewareFlag = false;

        $this->eventName = bin2hex(random_bytes(8));

        $this->event = new BaseEvent($this->eventName);
    }

    public function testDispatch() {
        $container = new Container();
        $this->dispatcher = new CustomEventDispatcher($container);

        $this->dispatcher->addListener($this->eventName, [$this, 'onReceive']);
        $this->dispatcher->addMiddleware([$this, 'onMiddlewareReceive']);

        $this->dispatcher->dispatch($this->event);

        $this->assertNotEmpty($this->dispatcher->getMiddleware());
        $this->assertTrue($this->receiveFlag);
        $this->assertTrue($this->middlewareFlag);
    }

    public function testDispatchWithContainer() {
        $container = new Container();

        $receiver = new BaseEventHandler();
        $container['testReceive'] = $receiver;

        $middleware = new BaseEventHandler();
        $container['testMiddleware'] = $middleware;

        $this->dispatcher = new CustomEventDispatcher($container);

        $this->dispatcher->addListener($this->eventName, ['testReceive', 'handle']);
        $this->dispatcher->addMiddleware(['testMiddleware', 'handle']);

        $this->dispatcher->dispatch($this->event);

        $this->assertNotEmpty($this->dispatcher->getMiddleware());
        $this->assertEquals($this->event->getEventName(), $receiver->getEvent()->getEventName());
        $this->assertEquals($this->event->getEventName(), $middleware->getEvent()->getEventName());
    }


    public function removeListener() {
        $this->dispatcher->removeListeners($this->eventName);

        $this->assertEmpty($this->dispatcher->getListeners($this->eventName));
    }

    public function onReceive(DomainEvent $event) {
        $this->receiveFlag = true;
    }

    public function onMiddlewareReceive(DomainEvent $event) {
        $this->middlewareFlag = true;
    }
}