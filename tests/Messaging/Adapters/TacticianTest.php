<?php
namespace Tests\Infrastructure\Messaging\Adapters;


use Infrastructure\Messaging\Adapters\Tactician;
use League\Tactician\CommandBus;
use League\Tactician\Container\ContainerLocator;
use League\Tactician\Handler\CommandHandlerMiddleware;
use League\Tactician\Handler\CommandNameExtractor\ClassNameExtractor;
use League\Tactician\Handler\MethodNameInflector\HandleInflector;
use Slim\Container;
use Tests\Infrastructure\Base;
use Tests\Infrastructure\BaseCommand;
use Tests\Infrastructure\BaseCommandHandler;

class TacticianTest extends Base
{
    /** @var Tactician */
    protected $commandBus;

    protected $value;
    protected $expected;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $container = new Container();

        $that = $this;

        $container[BaseCommandHandler::class] = function ($container) use ($that) {
            return new BaseCommandHandler($that);
        };

        $containerLocator = new ContainerLocator(
            $container,
            [
                BaseCommand::class => BaseCommandHandler::class
            ]
        );

        $commandHandlerMiddleware = new CommandHandlerMiddleware(
            new ClassNameExtractor(),
            $containerLocator,
            new HandleInflector()
        );

        $this->commandBus = new Tactician(new CommandBus([
            $commandHandlerMiddleware
        ]));

        $this->value = "";
        $this->expected = "";
    }

    public function testHandle() {
        $this->expected = bin2hex(random_bytes(8));
        $command = new BaseCommand($this->expected);
        $this->commandBus->handle($command);

        $this->assertEquals($this->expected, $this->value);
    }

    public function setReceived($value) {
        $this->value = $value;
    }
}