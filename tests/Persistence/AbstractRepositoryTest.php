<?php
namespace Tests\Infrastructure\Persistence;


use Doctrine\ORM\ORMException;
use Infrastructure\Events\Adapters\CustomEventDispatcher;
use Infrastructure\Persistence\EntityManagerInterface;
use Mockery;
use Slim\Container;
use Tests\Infrastructure\Base;
use Tests\Infrastructure\BaseEvent;

class AbstractRepositoryTest extends Base
{
    protected $check;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testRepo() {
        $entityManager = Mockery::mock(EntityManagerInterface::class);

        $entityManager->shouldReceive('persist')
            ->once()
            ->withAnyArgs()
            ->andReturn()
            ->mock();

        $entityManager->shouldReceive('flush')
            ->once()
            ->withNoArgs()
            ->andReturn()
            ->mock();

        $value = bin2hex(random_bytes(8));
        $this->check = false;

        $dispatcher = new CustomEventDispatcher(new Container());
        $dispatcher->addListener($value, [$this, 'receive']);

        $user = new UserEntity($value);

        $userRepo = new UserRepository($entityManager, $dispatcher);

        $this->assertTrue($userRepo->store($user));
        $this->assertTrue($this->check);
    }

    /**
     * @depends testRepo
     */
    public function testRepoException() {
        $entityManager = Mockery::mock(EntityManagerInterface::class);

        $entityManager->shouldReceive('persist')
            ->once()
            ->withAnyArgs()
            ->andReturn()
            ->mock();

        $entityManager->shouldReceive('flush')
            ->once()
            ->withNoArgs()
            ->andThrow(ORMException::class, 'Error')
            ->mock();

        $this->check = false;
        $value = bin2hex(random_bytes(8));

        $dispatcher = new CustomEventDispatcher(new Container());

        $dispatcher->addListener($value, [$this, 'receive']);
        $user = new UserEntity($value);

        $userRepo = new UserRepository($entityManager, $dispatcher);

        $this->assertTrue(!$userRepo->store($user));
        $this->assertTrue(!$this->check);
    }

    public function receive(BaseEvent $event) {
        $this->check = true;
    }
}